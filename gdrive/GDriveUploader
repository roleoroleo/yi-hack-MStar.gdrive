#!/bin/sh
# GDriveUploader version 0.5 by Alexandr Porunov https://github.com/porunov/xiaomi_gdrive
# Google drive uploader
# Modified by roleo to run on yi-hack-Allwinner cam

gdrive_dir="/tmp/sd/yi-hack/gdrive/"
gdrive_bin_dir="/tmp/sd/yi-hack/bin/"
gdrive_lib_dir="/tmp/sd/yi-hack/lib/"
record_dir="/tmp/sd/record/"
next_dir=""
next_time=0
sleep_time=0
current_file=""
log=${gdrive_dir}log/GDriveUploader.log
max_connect_tries=3

# hours: 00 minutes: 00 seconds: 00
start_time="00:00:00"
# hours: 23 minutes: 59 seconds: 59
finish_time="23:59:59"

DEBUG_MODE=true   # 1/false to turn off; 0/true to turn on debug logs

# Keep the log file less than 512KB
# Pass a log file full path as parameter
check_log_file() {
  if [ $(ls -ls ${1}| awk '{print $6}') -gt 524288 ]; then
    tail -100 ${1} > ${1}.new
    rm ${1}
    mv ${1}.new ${1}
  fi
}

# Pass a message string to log to file
write_to_debug_file() {
  if [ ${DEBUG_MODE} = true ]; then
    echo ${1} >> ${gdrive_dir}log/debugInfo.log
    check_log_file ${gdrive_dir}log/debugInfo.log
  fi
}

# Make sure the upload job work during the setup timespan
wait_until_proper_hours() {
  while [ 1 ] ;  do
    current_time=`date +"%H:%M:%S" | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}'`

    # Do not wait(do the upload job) when current time is in the start-finnish interval
    if [ ${current_time} -le ${finish_time} ] && [ ${current_time} -ge ${start_time} ]; then
      break
    else
      if [ ${current_time} -le ${start_time} ]; then
        sleep_time=$((${start_time} - ${current_time}))   # Wait until the start time
      else
        # Current time has passed the finish time of the day, wait for the next day to upload
        sleep_time=$((86400 - ${current_time} + ${start_time}))  
      fi
    fi

    message="Wait to upload, current time is `date +"%H:%M:%S"`, upload task will start at ${start_time}"
    write_to_debug_file "${message}"

    sleep ${sleep_time} 
  done
}


# Call curl to send POST request to renew google drive access token
renew_token(){
  while [ 1 ] ;  do
		wait_until_proper_hours

		curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Content-Type: application/x-www-form-urlencoded" --request POST -o ${gdrive_dir}conf/refreshed_token --data "client_id=${client_id}&client_secret=${client_secret}&refresh_token=${refresh_token}&grant_type=refresh_token" 'https://www.googleapis.com/oauth2/v4/token' > /dev/null

		if [ -f "${gdrive_dir}conf/refreshed_token" ]; then
			if grep -q "access_token" ${gdrive_dir}conf/refreshed_token; then
				break
			else
				echo "ERROR: $(date) : Your refresh_token might has reached the limit. Please configure your google drive access again. Please use configuration scipt."
				echo "ERROR: $(date) : Check ${gdrive_dir}conf/refreshed_token for detailed information"
			fi
		else
				echo "WARNING: $(date) : Can not refresh token. Please check internet conectivity"
				echo $(cat ${gdrive_dir}conf/refreshed_token)
		fi

		check_log_file ${log}
		sleep 15
	done

	export access_token=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | grep -E '\["access_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
	
	if grep -q "refresh_token" ${gdrive_dir}conf/refreshed_token; then
		export refresh_token=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | grep -E '\["refresh_token"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
  fi

	echo "access_token='${access_token}'" > ${gdrive_dir}conf/gdrive_token.conf
	echo "refresh_token='${refresh_token}'" >> ${gdrive_dir}conf/gdrive_token.conf

  if grep -q "expires_in" ${gdrive_dir}conf/refreshed_token; then
		expiretion_time=$(cat "${gdrive_dir}conf/refreshed_token" | ${gdrive_dir}./JSON.sh -b | grep -E '\["expires_in"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
		export expires_in=$(($expiretion_time + $(date +%s)));
		echo "expires_in=${expires_in}" >> ${gdrive_dir}conf/gdrive_token.conf
  fi

  rm ${gdrive_dir}conf/refreshed_token
}

# Update token when it's expired
# Call it before using curl to send any google drive api request
check_token(){
	if [ ! -z ${expires_in+x} ]; then
		if [ $(date +%s) -ge ${expires_in} ]; then
			renew_token
		fi
  fi
}

# Format the date and time string into a seconds since 1970-01-01 00:00:00 UTC
# Pass a time string like "2020Y11M20D16H00M00S" as parameter
str_to_time(){
  # date -d command accepts time string "YYYY-MM-DD hh:mm:ss" as valid format(rfc-3339) in sh shell
  YYYYMMDD=$(echo $1 | cut -c 1-4)-$(echo $1 | cut -c 6-7)-$(echo $1 | cut -c 9-10)
  hhmmss=$(echo $1 | cut -c 12-13):$(echo $1 | cut -c 15-16):$(echo $1 | cut -c 18-19)
  rfc_form="${YYYYMMDD} ${hhmmss}"
  echo $(date -d "${rfc_form}" +%s)  # need to use double quotation sign 

  # The following code has issues when execute date command as it doesn't accept yyyyMMddHHmm.SS format time string
  # 2020Y11M20D16H00M00S --> yyyyMMddHHmm.SS(202011201600.00) will output invalid date '202011201600.00'
  # rfc_form=$(echo $1 | cut -c 1-4)$(echo $1 | cut -c 6-7)$(echo $1 | cut -c 9-10)$(echo $1 | cut -c 12-13)$(echo $1 | cut -c 15-16).$(echo $1 | cut -c 18-19)
  # echo $(date -d ${rfc_form} +%s)
}

get_next_dir(){
	newDir=""
	for n in $(ls -1 ${record_dir} | grep -iv tmp); do
		if [ "$current_dir" \< "$n" ]; then
			newDir=$(echo ${n})
			break
		fi
	done
	echo ${newDir}
}

get_next_file(){
  result=""
  for n in $(ls -1 ${record_dir}${current_dir} | grep -iv tmp); do
		if [ "$current_file" \< "$n" ] && [ "$(echo -n $n | tail -c 4)" = ".mp4" ]; then
			result=$(echo ${n})
			break
		fi
  done
  echo ${result}
}

newest_dir(){
	result=""
	for n in $(ls -1r ${record_dir} | grep -iv tmp); do
		result=$(echo ${n})
		break
	done
	echo "${result}"
}

oldest_dir(){
	result=""
	for n in $(ls -1 ${record_dir} | grep -iv tmp); do
		result=$(echo ${n})
		break
	done
	echo "${result}"
}

get_oldest_file(){
	result=""
	for n in $(ls -1 ${record_dir}${current_dir} | grep -iv tmp); do
		if [ "$(echo -n $n | tail -c 4)" = ".mp4" ]; then
			result=$(echo ${n})
			break
		fi
	done
	echo "${result}"
}


# Create a directory in google drive
create_remote_dir(){
	check_token

	while [ 1 ] ;  do
		wait_until_proper_hours

		message="Checking remote directory access: ${access_token} ${google_dir_id} ${1} ${folder_id}"
    write_to_debug_file "${message}"

		curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" -H "Content-Type: application/json" --data "{'title': '${1}', 'parents': [{'id': '${folder_id}'}], 'mimeType': 'application/vnd.google-apps.folder'}" --request POST -o ${gdrive_dir}tmp/lastDirInfo 'https://www.googleapis.com/drive/v2/files?supportsAllDrives=true&fields=id' > /dev/null

		if [ -f "${gdrive_dir}tmp/lastDirInfo" ]; then
			google_dir_id=$(cat "${gdrive_dir}tmp/lastDirInfo" | ${gdrive_dir}./JSON.sh -b | grep -E '\["id"\]' | sed 's/\[.*\][^\"]*//g' | sed 's/\"//g')

	    if [ "${google_dir_id}" = "" ]; then
				response_code=$(cat "${gdrive_dir}tmp/lastDirInfo" | ${gdrive_dir}./JSON.sh -b | grep -E '\["error","code"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')

				if [ "${response_code}" = "401" ]; then
					echo "WARNING: $(date) : Can not create dir. Token was expired. Trying to refresh token and create new dir again"
					renew_token
				else
					echo ${response_code}
					echo "WARNING: $(date) : Can not create dir. Something happen. Trying to create new dir again"
					echo $(cat ${gdrive_dir}tmp/lastDirInfo)
					sleep 5
				fi
	    else
				rm ${gdrive_dir}tmp/lastDirInfo
				break
	    fi
		else
			echo "WARNING: $(date) : Can not create dir. Please check internet conectivity"
			echo $(cat ${gdrive_dir}tmp/lastDirInfo)
			sleep 15
		fi

		check_log_file ${log}
	done
}

generate_empty_current_file(){
	current_dir_file=""
	current_file=""
	echo "current_dir_file=''" > ${gdrive_dir}gdrive_file.index
}

generate_oldest_dir(){
	export current_dir=$(oldest_dir)
	if [ "${current_dir}" != "" ]; then
		create_remote_dir ${current_dir}
		echo "current_dir='${current_dir}'" > ${gdrive_dir}gdrive_folder.index
		echo "google_dir_id='${google_dir_id}'" >> ${gdrive_dir}gdrive_folder.index
		next_time=$(($(str_to_time "${current_dir}00M00S") + 3600))
  else
		google_dir_id=""
  fi
}

# Read and check google drive access API credential, token and upload path settings
read_conf_files(){
    echo "-----STARTING GDriveUploader at $(date)"
    check_log_file ${log}

    if [ -f ${gdrive_dir}conf/gdrive_token.conf ]; then
			. ${gdrive_dir}conf/gdrive_token.conf
			if [ -z ${access_token+x} ] || [ -z ${refresh_token+x} ]; then
				echo "ERROR: $(date) : Your token configuretion file has not been configured properly. Please use configuration scipt again"
				echo "ERROR: $(date) : Your token configuretion file has not access_token and refresh_token."
				exit 1
			fi
    else
			echo "ERROR: $(date) : You have to configure you access first. Please use configuration scipt"
			echo "ERROR: $(date) : Your token configuretion file has to be places in this location: ${gdrive_dir}conf/gdrive_token.conf"
			exit 1
    fi

    if [ -f ${gdrive_dir}conf/gdrive_folder.conf ]; then
			. ${gdrive_dir}conf/gdrive_folder.conf
			if [ -z ${folder_id+x} ]; then
				echo "ERROR: $(date) : Your folder configuretion file has not been configured properly. Please use configuration scipt again"
				echo "ERROR: $(date) : Your folder configuretion file has not folder_id."
				exit 1
			fi
    else
			echo "ERROR: $(date) : You have to configure you folder id first. Please use configuration scipt"
			echo "ERROR: $(date) : Your configuretion file has to be places in this location: ${gdrive_dir}conf/gdrive_folder.conf"
			exit 1
    fi

    if [ -f ${gdrive_dir}conf/gdrive.conf ]; then
			. ${gdrive_dir}conf/gdrive.conf
			if [ -z ${client_id+x} ] || [ -z ${client_secret+x} ]; then
				echo "ERROR: $(date) : Your configuretion file has not been configured properly. Please use configuration scipt again"
				echo "ERROR: $(date) : Your configuretion file has not client_id and client_secret."
				exit 1
			fi
    else
			echo "ERROR: $(date) : You have to configure you client_id and client_secret first. Please use configuration scipt"
			echo "ERROR: $(date) : Your configuretion file has to be places in this location: ${gdrive_dir}conf/gdrive.conf"
			exit 1
    fi

    if [ -f ${gdrive_dir}gdrive_folder.index ]; then
			. ${gdrive_dir}gdrive_folder.index
			if [ -z ${current_dir+x} ] || [ -z ${google_dir_id+x} ]; then
				generate_oldest_dir
			else
				if [ ! -d "${record_dir}${current_dir}" ]; then
					generate_oldest_dir
				fi
			fi

    else
			generate_oldest_dir
    fi

    if [ -f ${gdrive_dir}gdrive_file.index ]; then
			. ${gdrive_dir}gdrive_file.index
			if [ -z ${current_dir_file+x} ]; then
					generate_empty_current_file
			else
				if [ ! -f ${record_dir}${current_dir}/$(echo ${current_dir_file} |  cut -c 15-24) ]; then
					generate_empty_current_file
				fi
			fi
    else
			generate_empty_current_file
    fi

    if [ "${current_dir}" != "$(echo ${current_dir_file} | cut -c 1-14)" ]; then
			generate_empty_current_file
    fi
}


# Pass the local file path for sending as the 1st parameter
# Pass the remote upload_file_id as the 2nd parameter
sendFile(){
	check_token
	tries=0

	while [ 1 ] ;  do
		wait_until_proper_hours
		curl --insecure -s --max-time 1200 -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" -H "Content-Length: $(ls -ls ${record_dir}${current_dir}/${1}| awk '{print $6}')" -H "Content-Type: video/mp4" --request PUT -T ${record_dir}${current_dir}/${1} -o ${gdrive_dir}tmp/lastFileInfo "https://www.googleapis.com/upload/drive/v3/files?supportsAllDrives=true&uploadType=resumable&upload_id=${2}"

		if [ -f "${gdrive_dir}tmp/lastFileInfo" ]; then
				file_id=$(cat "${gdrive_dir}tmp/lastFileInfo" | ${gdrive_dir}./JSON.sh -b | grep -E '\["id"\]' | sed 's/\[.*\][^\"]*//g' | sed 's/\"//g')
	    if [ "${file_id}" = "" ]; then
				response_code=$(cat "${gdrive_dir}tmp/lastFileInfo" | ${gdrive_dir}./JSON.sh -b | grep -E '\["error","code"\]' | sed 's/\[.*\][^\"0-9tf]*//g' | sed 's/\"//g')
				if [ "${response_code}" = "401" ]; then
					echo "WARNING: $(date) : Can not send the file ${record_dir}${current_dir}/${1}. Token was expired. Trying to refresh token and send file again"
					renew_token
				else
					echo "WARNING: $(date) : Can not send the file ${record_dir}${current_dir}/${1}. Something happen. Trying to send the file again"

					echo $(cat ${gdrive_dir}tmp/lastFileInfo)
					sleep 5
				fi
	    else
				break
	    fi
		else
	    echo "WARNING: $(date) : Can not send file. Please check internet conectivity"
	    echo $(cat ${gdrive_dir}tmp/lastFileInfo)
	    sleep 15
		fi

		check_log_file ${log}
		if [ ! -f "${record_dir}${current_dir}/${1}" ]; then
			break
		fi

		ping -q -c2 8.8.8.8 > /dev/null
		if [ $? -eq 0 ]; then
			tries=$(($tries + 1))
		fi

		if [ $tries -gt $max_connect_tries ]; then

			# Added this to preventing all files failure of current directory when remote directory is deleted
			if grep -q '404' ${gdrive_dir}tmp/lastFileInfo && grep -q 'fileId' ${gdrive_dir}tmp/lastFileInfo && grep -qi "File not found" ${gdrive_dir}tmp/lastFileInfo ; then
				create_remote_dir ${current_dir}
				echo "Directory ${current_dir} is not found in google drive, re-created it to hold the current uploading file"
			else 
				echo "WARNING: $(date) : Can not send the file ${record_dir}${current_dir}/${1}. May be it is too big. File was skipped"
			fi

			break
		fi

	done

	rm ${gdrive_dir}tmp/lastFileInfo
	current_file="${1}"
	current_dir_file="${current_dir}${current_file}"
	echo "current_dir_file=${current_dir_file}" > ${gdrive_dir}gdrive_file.index
}

# Send file to google drive by curl POST method
# Send file metadata and get upload file id at first, then send the file conteint
# Use local video filename as parameter
sendMetadata(){
	check_token
	tries=0

	jsonData="{'name': '${1}', parents: ['${google_dir_id}']}"
  write_to_debug_file "directory: ${current_dir}, ${jsonData}"

	while [ 1 ] ;  do
		wait_until_proper_hours
		curl --insecure -s --max-time 100 -H "Host: www.googleapis.com" -H "Authorization: Bearer ${access_token}" -H "Content-Length: $(echo "${jsonData}" | awk '{print length}')" -H "Content-Type: application/json; charset=UTF-8" -H "X-Upload-Content-Type: video/mp4" -H "X-Upload-Content-Length: $(ls -ls ${record_dir}${current_dir}/${1}| awk '{print $6}')" --request POST  --data "${jsonData}" -D ${gdrive_dir}tmp/lastFileMetadataInfo "https://www.googleapis.com/upload/drive/v3/files?supportsAllDrives=true&uploadType=resumable" > /dev/null

		if [ -f "${gdrive_dir}tmp/lastFileMetadataInfo" ]; then

			# Modify to adapt to HTTP 2.0 (FOR TESTING ON DESKTOP LINUX)
	    if grep -qi "200" ${gdrive_dir}tmp/lastFileMetadataInfo && ( grep -qi "Location" ${gdrive_dir}tmp/lastFileMetadataInfo || grep -qi "X-GUploader-UploadID" ${gdrive_dir}tmp/lastFileMetadataInfo; ); then
				upload_file_id=$(cat ${gdrive_dir}tmp/lastFileMetadataInfo | grep -Ei 'X-GUploader-UploadID:' | sed 's/.*\ //g' | tr -d '\n' | tr -d '\r')
	
				if [ "${upload_file_id}" = "" ]; then
					upload_file_id=$(cat ${gdrive_dir}tmp/lastFileMetadataInfo | grep -E 'Location:' | sed 's/.*upload_id=//g' | sed 's/&.*//g' | tr -d '\n' | tr -d '\r')
	      fi
	      
				if [ "${upload_file_id}" = "" ]; then
					echo "WARNING: $(date) : Something wrong happen when metadata of the file was sending. Trying to send metadata of the file again"
					echo $(cat ${gdrive_dir}tmp/lastFileMetadataInfo)
		    	sleep 5
		    else
		    	sendFile "${1}" "${upload_file_id}" 
		    	break
	      fi

			else
				if grep -qi "401 Unauthorized" ${gdrive_dir}tmp/lastFileMetadataInfo; then
					echo "WARNING: $(date) : Can not send metadata of the file. Token was expired. Trying to refresh token and send metadata again"
					renew_token  
				else					
					#echo "WARNING: $(date) : Can not send metadata of the file. Something happen. Trying to send metadata of the file again"
					#echo $(cat ${gdrive_dir}tmp/lastFileMetadataInfo)
          sleep 5

					# Infinite loop will happen when curl fails to send metadata without a break/return statement
					tries=$(($tries + 1))
					if [ $tries -gt $max_connect_tries ]; then
						echo "WARNING: $(date) : Failed to send metadata of file ${record_dir}${current_dir}/${1}, invalid remote directory id: ${google_dir_id}, retried ${max_connect_tries} times"
						# break
						return 1  # mark failed in return value
					fi
				fi
			fi

		else
				echo "WARNING: $(date) : Can not send metadata of the file. Please check internet conectivity"
				echo $(cat ${gdrive_dir}tmp/lastFileMetadataInfo)
				sleep 15
		fi

		check_log_file ${log}
		
	done
	rm ${gdrive_dir}tmp/lastFileMetadataInfo
}

# Upload mp4 files in current directory (transfer video files directory by directory)
finish_current_dir_uploads(){
  while [ 1 ] ;  do
		if [ "${current_file}" = "" ]; then
			next_file=$(get_oldest_file)		# upload the first file in current directory
		else
			next_file=$(get_next_file)			# continue to upload other files in directory
		fi

		if [ "${next_file}" = "" ]; then
			break		# files in this direcory are all uploaded
		else
			# if this function call fails, it will run as infinite loop here without a break statement
			sendMetadata "${next_file}"  # call curl to send file to gdrive(metadata first, then file data)
			if [ $? = 1 ]; then 
				write_to_debug_file "Ignored to upload files in ${current_dir} due to many failure of sending metadata"
				break
			fi
		fi
  done
}


# Checking how many files are available for next uploading every 5 seconds
# Do not scan undone streaming video file in the latest directory
# Max wait time is 60 seconds
wait_for_new_file(){
	wait_finish_time=$(($(date +%s) + 60))	# since new video file is generated every minute

	while [ ${wait_finish_time} -gt $(date +%s) ] ;  do
		new_files_count=$(ls ${record_dir}${next_dir} | grep -iv tmp | grep -c ^)
		echo "new generated files count" ${new_files_count} ${next_dir}
		if [ ${new_files_count} -gt 0 ]; then
			break
		else
			sleep 5  # continue to check every 5 seconds
		fi
	done
}

# Main function to upload video files to google drive
# Upload video files directory by directory
# Upload mp4 file one by one in each directory
uploadFiles(){

	 # Each directory contains mp4 files from a one-hour timespan
  if [ "${current_dir}" != "" ] && [ ${next_time} -eq 0 ]; then
		next_time=$(($(str_to_time "${current_dir}00M00S") + 3600)) # get next directory time string
  fi
  
	if [ "${current_dir_file}" != "" ]; then
		current_file=$(echo ${current_dir_file} | cut -c 15-24) # get mp4 filename
  fi

	while [ 1 ] ;  do
		if [ "${current_dir}" = "" ]; then
	    generate_oldest_dir
	    if [ "${current_dir}" = "" ]; then
				sleep 30	# files are generated every minute
				continue
	    fi
		fi

		while [ $(date +%s) -gt ${next_time} ];  do

      # Check if any new directory is available for uploading
			next_dir=$(get_next_dir)
			if [ "${next_dir}" != "" ]; then
				wait_for_new_file
				finish_current_dir_uploads  

        # switch directory for next round uploading
				export current_dir="${next_dir}"
				create_remote_dir ${current_dir}
				echo "current_dir='${current_dir}'" > ${gdrive_dir}gdrive_folder.index
				echo "google_dir_id='${google_dir_id}'" >> ${gdrive_dir}gdrive_folder.index
				next_time=$(($(str_to_time "${current_dir}00M00S") + 3600))
				generate_empty_current_file
			else
				break # no new directory, break to upload files in the last directory
			fi
		done

		finish_current_dir_uploads
		sleep 30
  done
}

start_time=`echo ${start_time} | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}'`
finish_time=`echo ${finish_time} | awk -F':' '{print $1 * 60 * 60 + $2 * 60 + $3}'`

read_conf_files >> ${log}
uploadFiles >> ${log} 2>&1 &
exit 0